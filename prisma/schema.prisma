// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// output       = "../generated/prisma"
// moduleFormat = "cjs"
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  SYSTEM
  ADMIN
  SUPTDCOLL
  LDCMAMLATDAR
  LDCSINGLEWINDOW
  MAMLATDAR
  TALATHI
  CIRCLEOFFICER
  LRO
  LAQ
  RAK
  DEPUTYCOLLECTOR
  COLLECTOR
  PATOCOLLECTOR
  RTSMAMLATDAR
  SURVEYSETTLEMENT
  DNHPDA
  SNSSO
  SURVEYOR
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum FeesStatus {
  ACTIVE
  INACTIVE
  PAID
  DUE
}

enum PaymentType {
  FEES
  PENALTY
  REFUND
  SANAD
  OTHER
}

enum PaymentMode {
  ONLINE
  DD
  CHALLAN
  CASH
  OTHER
}

enum DepartmentStatus {
  SUBMIT
  SEEK_REPORT
  REPORT_VERIFIED
  NOTING_DRAFT
  ALLOT_HEARING
  HEARING_SCHEDULED
  HEARING
  INTIMATION_DRAFT
  PAY_FEES
  FEES_PAID
  APPLY_SANAD
  ORDER_GENERATE
  ORDER_DOWNLOAD
}

model user {
  id          Int        @id @default(autoincrement())
  firstName   String
  lastName    String
  password    String?
  otp         String?
  alias       String?
  contact     String
  contact_two String?
  village     village?   @relation(fields: [villageId], references: [id])
  villageId   Int?
  address     String?
  aadhar      String?
  email       String?
  role        Role       @default(USER)
  status      UserStatus @default(ACTIVE)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?

  na_form_create na_form[] @relation("na_form_create")
  na_form_update na_form[] @relation("na_form_update")
  na_form_delete na_form[] @relation("na_form_delete")

  na_fees_create na_fees[] @relation("na_fees_create")
  na_fees_update na_fees[] @relation("na_fees_update")
  na_fees_delete na_fees[] @relation("na_fees_delete")

  na_query_create    na_query[] @relation("na_query_create")
  na_query_update    na_query[] @relation("na_query_update")
  na_query_delete    na_query[] @relation("na_query_delete")
  na_query_from_user na_query[] @relation("na_query_from_user")
  na_query_to_user   na_query[] @relation("na_query_to_user")

  na_upload_create na_upload[] @relation("na_upload_create")
  na_upload_update na_upload[] @relation("na_upload_update")
  na_upload_delete na_upload[] @relation("na_upload_delete")

  na_survey_create na_survey[] @relation("na_survey_create")
  na_survey_update na_survey[] @relation("na_survey_update")
  na_survey_delete na_survey[] @relation("na_survey_delete")
  na_form          na_form[]

  na_noting_create na_noting[] @relation("na_noting_create")
  na_noting_update na_noting[] @relation("na_noting_update")
  na_noting_delete na_noting[] @relation("na_noting_delete")
}

model village {
  id           Int            @id @default(autoincrement())
  name         String
  status       Boolean        @default(true)
  user         user[]
  na_applicant na_applicant[]
  na_form      na_form[]
  na_survey    na_survey[]
}

enum QueryType {
  QUERY
  CORESPONDENCE
  NOTING
  UPDATES
  REPORT
  SUBMITREPORT
  SUBMITREPORTEDITOR
  PRENOTE
  HEARING_SCHEDULED
  RESCHEDULED
  JIMNI
  SANAD
  INTIMATION_DRAFT
  HEARING_NOTICE
}

enum RequestType {
  DEPTTOAPPL
  APPLTODEPT
  DEPTTODEPT
}

enum Status {
  ACTIVE
  INACTIVE
}

enum FormStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
  INPROGRESS
  HEARING_SCHEDULED
  PAY_FEES
}

enum Department {
  USER
  SYSTEM
  ADMIN
  MAMLATDAR
  LAQ
  LRO
  PDA
  PATELTALATHI
  RDC
  COLLECTOR
  LDCSINGLEWINDOW
  SUPERINTENDENT_COLLECTORATE
}

enum QueryStatus {
  PENDING
  REPLIED
  CLOSED
}

// na from section start from here

model na_form {
  id            Int              @id @default(autoincrement())
  village       village?         @relation(fields: [villageId], references: [id])
  villageId     Int?
  last_name     String?
  q1            Boolean          @default(true)
  q2            String?
  q3            String?
  anx1          String?
  anx2          String?
  anx3          String?
  anx4          String?
  anx5          String?
  q4            String? // full name of applicant
  q5            String?          @db.MediumText // full address of applicant 
  q6            String? // occupation of applicant
  q7            String? // village of land
  q8            String? // survey number
  q9            String? // old survey number
  q10           String? // total area of land
  q11           String? // area of land to be assessed
  q12           String? // purpose of na
  q13           String? // present use of land
  q14           String? // electric light
  q15           String? // land under acquisition
  q16           String? // road
  q17           String? // proposed road
  q18           String? // past application
  dept_user     user             @relation(fields: [dept_user_id], references: [id])
  dept_user_id  Int
  office_status Department       @default(LDCSINGLEWINDOW)
  form_status   FormStatus       @default(DRAFT)
  dept_status   DepartmentStatus @default(SUBMIT)
  seek_report   Boolean          @default(false)
  status        Status           @default(ACTIVE)
  createdAt     DateTime         @default(now())
  createdBy     user?            @relation("na_form_create", fields: [createdById], references: [id])
  createdById   Int?
  updatedAt     DateTime         @updatedAt
  updatedBy     user?            @relation("na_form_update", fields: [updatedById], references: [id])
  updatedById   Int?
  deletedAt     DateTime?
  deletedBy     user?            @relation("na_form_delete", fields: [deletedById], references: [id])
  deletedById   Int?
  na_fees       na_fees[]
  na_query      na_query[]
  na_upload     na_upload[]
  na_survey     na_survey[]
  na_applicant  na_applicant[]
  na_noting     na_noting[]
}

model na_applicant {
  id            Int        @id @default(autoincrement())
  firstName     String
  lastName      String
  contact       String?
  village       village?   @relation(fields: [villageId], references: [id])
  villageId     Int?
  na_form       na_form    @relation(fields: [na_formId], references: [id])
  na_formId     Int
  address       String?
  aadhar        String?
  email         String?
  relation      String?
  signature_url String?
  is_main       Boolean    @default(false)
  status        UserStatus @default(ACTIVE)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  deletedAt     DateTime?
}

model na_fees {
  id               Int         @id @default(autoincrement())
  na_form          na_form     @relation(fields: [na_formId], references: [id])
  na_formId        Int
  amount           String
  payment_type     PaymentType @default(FEES)
  payment_mode     PaymentMode @default(ONLINE)
  transaction_id   String?
  transaction_date DateTime?
  track_id         String?
  bank_name        String?
  bank_ref_no      String?
  invoice_no       String?
  order_id         String?
  is_paid          Boolean     @default(false)
  purpose          String?     @db.MediumText
  status           FeesStatus  @default(ACTIVE)
  createdAt        DateTime    @default(now())
  createdBy        user?       @relation("na_fees_create", fields: [createdById], references: [id])
  createdById      Int?
  updatedAt        DateTime    @updatedAt
  updatedBy        user?       @relation("na_fees_update", fields: [updatedById], references: [id])
  updatedById      Int?
  deletedAt        DateTime?
  deletedBy        user?       @relation("na_fees_delete", fields: [deletedById], references: [id])
  deletedById      Int?
}

model na_query {
  id           Int         @id @default(autoincrement())
  na_form      na_form     @relation(fields: [na_formId], references: [id])
  na_formId    Int
  type         QueryType   @default(QUERY)
  from_user    user        @relation("na_query_from_user", fields: [from_userId], references: [id])
  from_userId  Int
  to_user      user        @relation("na_query_to_user", fields: [to_userId], references: [id])
  to_userId    Int
  request_type RequestType @default(DEPTTOAPPL)
  query_status QueryStatus @default(PENDING)
  query        String      @db.LongText
  upload_url_1 String?
  upload_url_2 String?
  upload_url_3 String?
  upload_url_4 String?
  upload_url_5 String?
  status       Status      @default(ACTIVE)
  createdAt    DateTime    @default(now())
  createdBy    user?       @relation("na_query_create", fields: [createdById], references: [id])
  createdById  Int?
  updatedAt    DateTime    @updatedAt
  updatedBy    user?       @relation("na_query_update", fields: [updatedById], references: [id])
  updatedById  Int?
  deletedAt    DateTime?
  deletedBy    user?       @relation("na_query_delete", fields: [deletedById], references: [id])
  deletedById  Int?
}

model na_noting {
  id          Int       @id @default(autoincrement())
  na_form     na_form   @relation(fields: [na_formId], references: [id])
  na_formId   Int
  status      Status    @default(ACTIVE)
  createdAt   DateTime  @default(now())
  createdBy   user?     @relation("na_noting_create", fields: [createdById], references: [id])
  createdById Int?
  updatedAt   DateTime  @updatedAt
  updatedBy   user?     @relation("na_noting_update", fields: [updatedById], references: [id])
  updatedById Int?
  deletedAt   DateTime?
  deletedBy   user?     @relation("na_noting_delete", fields: [deletedById], references: [id])
  deletedById Int?
}

model na_upload {
  id          Int       @id @default(autoincrement())
  na_form     na_form   @relation(fields: [na_formId], references: [id])
  na_formId   Int
  upload_url  String?
  name        String?
  status      Status    @default(ACTIVE)
  createdAt   DateTime  @default(now())
  createdBy   user?     @relation("na_upload_create", fields: [createdById], references: [id])
  createdById Int?
  updatedAt   DateTime  @updatedAt
  updatedBy   user?     @relation("na_upload_update", fields: [updatedById], references: [id])
  updatedById Int?
  deletedAt   DateTime?
  deletedBy   user?     @relation("na_upload_delete", fields: [deletedById], references: [id])
  deletedById Int?
}

model na_survey {
  id           Int       @id @default(autoincrement())
  na_form      na_form   @relation(fields: [na_formId], references: [id])
  na_formId    Int
  survey_no    String?
  sub_division String?
  village      village   @relation(fields: [villageId], references: [id])
  villageId    Int
  area         String?
  status       Status    @default(ACTIVE)
  createdAt    DateTime  @default(now())
  createdBy    user?     @relation("na_survey_create", fields: [createdById], references: [id])
  createdById  Int?
  updatedAt    DateTime  @updatedAt
  updatedBy    user?     @relation("na_survey_update", fields: [updatedById], references: [id])
  updatedById  Int?
  deletedAt    DateTime?
  deletedBy    user?     @relation("na_survey_delete", fields: [deletedById], references: [id])
  deletedById  Int?
}

// na from section end from here
